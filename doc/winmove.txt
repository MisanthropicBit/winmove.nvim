*winmove.txt*                                   Easily move and resize windows

==============================================================================
Table of Contents                                  *winmove-table-of-contents*

  - Requirements                                        |winmove-requirements|
  - Installing                                            |winmove-installing|
  - Setup                                                      |winmove-setup|
  - Commands                                                |winmove-commands|
  - Autocommands                                        |winmove-autocommands|
  - Public API                                            |winmove-public-api|
  - Contributing                                        |winmove-contributing|
  - FAQ                                                          |winmove-faq|
  - Showcase                                                |winmove-showcase|
  - Similar projects                                |winmove-similar-projects|


REQUIREMENTS                                            *winmove-requirements*

- Neovim 0.8.0+


INSTALLING                                                *winmove-installing*

- **vim-plug**

>vim
    Plug 'MisanthropicBit/winmove.nvim'
<

- **packer.nvim**

>lua
    use 'MisanthropicBit/winmove.nvim'
<


SETUP                                                          *winmove-setup*

If you are content with the defaults, you don’t need to call the `setup`
function. Otherwise, either call `winmove.setup` with your desired options or
set `vim.g.winmove` to your desired options. Defaults are shown below.

>lua
    require('winmove').setup({ -- Or pass the table to vim.g.winmove
        highlights = {
            move = "Search", -- Highlight group for move mode
            resize = "Substitute", -- Highlight group for resize mode
        },
        wrap_around = true, -- Wrap around edges when moving windows
        default_resize_count = 3, -- Default amount to resize windows
        keymaps = {
            help = "?", -- Open floating window with help for the current mode
            help_close = "q", -- Close the floating help window
            quit = "q", -- Quit current mode
            toggle_mode = "<tab>", -- Toggle between move and resize modes
            move = {
                left = "h", -- Move window left
                down = "j", -- Move window down
                up = "k", -- Move window up
                right = "l", -- Move window right
                far_left = "H", -- Move window far left and maximize it
                far_down = "J", -- Move window down and maximize it
                far_up = "K", -- Move window up and maximize it
                far_right = "L", -- Move window right and maximize it
                split_left = "sh", -- Create a split with the window on the left
                split_down = "sj", -- Create a split with the window below
                split_up = "sk", -- Create a split with the window above
                split_right = "sl", -- Create a split with the window on the right
            },
            resize = {
                -- When resizing, the anchor is in the top-left corner of the window
                left = "h", -- Resize to the left
                down = "j", -- Resize down
                up = "k", -- Resize up
                right = "l", -- Resize to the right
            },
        },
    })
<


COMMANDS                                                    *winmove-commands*

The easiest way to start a mode is through the `Winmove` command: `:Winmove
move` or `:Winmove resize`.


  [!IMPORTANT] Moving windows takes into account the cursor position of the
  current window relative to the target window in the direction you are moving.
  For example, if your cursor position is closest to the bottom of one window in
  the target direction, the window will be moved below that window. See
  |winmove-this-example| for a visual explanation.
The `Winmove` command also takes arguments for moving windows that correspond
to the `config.keymaps.move` key passed to the `setup` function,
e.g. `:Winmove far_right`. You can also quit the current mode using `:Winmove
quit`.


AUTOCOMMANDS                                            *winmove-autocommands*

You can define autocommands for when modes start and end.

- `"WinmoveModeStart"`
- `"WinmoveModeEnd"`

>lua
    vim.api.nvim_create_autocmd("WinmoveModeStart", {
        callback = function(event)
            vim.print("Started ".. event.data.mode .. "mode")
        end,
    })
    
    vim.api.nvim_create_autocmd("WinmoveModeEnd", {
        callback = function(event)
            vim.print("Ended ".. event.data.mode .. "mode")
        end,
    })
<


PUBLIC API                                                *winmove-public-api*

Consider only the functions below part of the official API. All other functions
are subject to change.

Setup `winmove`.

>lua
    winmove.setup({ ... })
<

Get the current version of `winmove`. You can also execute `:Winmove version`.

>lua
    winmove.version()
<

Check which mode is currently active. Returns `"move"`, `"resize"`, or `nil`.

>lua
    winmove.current_mode()
<


CONTRIBUTING                                            *winmove-contributing*

Contributions are welcome!

1. Fork this repository.
2. Make sure tests are passing (run `./tests/run_tests.sh` in the root directory). Running the tests requires `plenary.nvim` <https://github.com/nvim-lua/plenary.nvim>
3. Submit a pull request.
4. Get it approved.


FAQ                                                              *winmove-faq*


Q: WHY CREATE THIS PROJECT?

**A**: There are |winmove-already-a-few-projects| for moving windows but none
of them felt intuitive to me so I did the only rational thing a developer would
do in this situation and created my own plugin. If any of the others suit your
needs then by all means use them.


SHOWCASE                                                    *winmove-showcase*


MOVING AROUND WINDOWS ~


MOVING AND RESIZING WINDOWS ~


MOVING USING RELATIVE CURSOR POSITION ~


TOGGLE HELP ~


SPLIT AS FAR AS POSSIBLE IN A DIRECTION ~


SPLIT INTO OTHER WINDOWS ~


WORKS WITH ASYNCHRONOUS OUTPUT ~


SIMILAR PROJECTS                                    *winmove-similar-projects*

- winshift.nvim <https://github.com/sindrets/winshift.nvim>
- vim-tradewinds <https://github.com/andymass/vim-tradewinds>

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
