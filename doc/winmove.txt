*winmove.txt*                                   Easily move and resize windows

==============================================================================
Table of Contents                                  *winmove-table-of-contents*

  - Requirements                                        |winmove-requirements|
  - Installing                                            |winmove-installing|
  - Configuration                                      |winmove-configuration|
  - Autocommands                                        |winmove-autocommands|
  - Public API                                            |winmove-public-api|
  - Contributing                                        |winmove-contributing|
  - FAQ                                                          |winmove-faq|
  - Showcase                                                |winmove-showcase|
  - Similar projects                                |winmove-similar-projects|


REQUIREMENTS                                            *winmove-requirements*

- Neovim 0.8.0+


INSTALLING                                                *winmove-installing*

- **vim-plug**

>vim
    Plug 'MisanthropicBit/winmove.nvim'
<

- **packer.nvim**

>lua
    use 'MisanthropicBit/winmove.nvim'
<


CONFIGURATION                                          *winmove-configuration*

If you are content with the defaults that are shown below, you donâ€™t need to
call the `configure` function. No default keymaps are set other than those
active during modes.

>lua
    require('winmove').configure({
        highlights = {
            move = "Search", -- Highlight group for move mode
        },
        wrap_around = true, -- Wrap around edges when moving windows
        keymaps = {
            help = "?", -- Open floating window with help for the current mode
            help_close = "q", -- Close the floating help window
            quit = "q", -- Quit current mode
            move = {
                left = "h", -- Move window left
                down = "j", -- Move window down
                up = "k", -- Move window up
                right = "l", -- Move window right
                far_left = "H", -- Move window far left and maximize it
                far_down = "J", -- Move window down and maximize it
                far_up = "K", -- Move window up and maximize it
                far_right = "L", -- Move window right and maximize it
                split_left = "sh", -- Create a split with the window on the left
                split_down = "sj", -- Create a split with the window below
                split_up = "sk", -- Create a split with the window above
                split_right = "sl", -- Create a split with the window on the right
            },
        },
    })
<


AUTOCOMMANDS                                            *winmove-autocommands*

You can define autocommands that trigger when a mode starts and ends.

>lua
    vim.api.nvim_create_autocmd("WinmoveModeStart", {
        callback = function(event)
            vim.print("Started ".. event.data.mode .. " mode")
        end,
    })
    
    vim.api.nvim_create_autocmd("WinmoveModeEnd", {
        callback = function(event)
            vim.print("Ended ".. event.data.mode .. " mode")
        end,
    })
<


PUBLIC API                                                *winmove-public-api*


  [!WARNING] Consider only the functions below part of the public API. All other
  functions are subject to change.

WINMOVE.CONFIGURE

Configure `winmove`. Also see |winmove-configuration|.


WINMOVE.VERSION

Get the current version of `winmove`.


WINMOVE.CURRENT_MODE

Check which mode is currently active. Returns `"move"` or `nil`.


WINMOVE.START_MODE

Start a mode.

>lua
    ---@param mode winmove.Mode
    winmove.start_mode(mode)
    
    -- Example:
    winmove.start_mode(winmove.Mode.Move)
    winmove.start_mode("move")
<


WINMOVE.STOP_MODE

Stop the current mode. Fails if no mode is currently active.


WINMOVE.MOVE_WINDOW

Move a window (does not need to be the current window). See
|winmove-this-showcase|.

>lua
    ---@param win_id integer
    ---@param dir winmove.Direction
    winmove.move_window(win_id, dir)
    
    -- Example:
    winmove.move_window(1000, "k")
<


WINMOVE.SPLIT_INTO

Split into a window (does not need to be the current window). See
|winmove-this-showcase|.

>lua
    ---@param win_id integer
    ---@param dir winmove.Direction
    winmove.split_into(win_id, dir)
    
    -- Example:
    winmove.split_into(1000, "l")
<


WINMOVE.MOVE_WINDOW_FAR

Move a window as far as possible in a direction (does not need to be the
current window). See |winmove-this-showcase|.

>lua
    ---@param win_id integer
    ---@param dir winmove.Direction
    winmove.move_window_far(win_id, dir)
    
    -- Example:
    winmove.move_window_far(1000, "h")
<


CONTRIBUTING                                            *winmove-contributing*

See here </CONTRIBUTING.md>.


FAQ                                                              *winmove-faq*


Q: WHY CREATE THIS PROJECT?

**A**: There are |winmove-already-a-few-projects| for moving windows but none
of them felt intuitive to me so I did the only rational thing a developer would
do in this situation and created my own plugin. If any of the others suit your
needs then by all means use them.


SHOWCASE                                                    *winmove-showcase*


MOVING AROUND WINDOWS ~


  [!IMPORTANT] Moving windows takes into account the cursor position of the
  current window relative to the target window in the direction you are moving.
  For example, if your cursor position is closest to the bottom of one window in
  the target direction, the window will be moved below that window. See
  |winmove-this-example| for a visual explanation.

https://github.com/user-attachments/assets/417023dd-9d5d-4ae9-891d-514e0f3038d5


MOVING USING RELATIVE CURSOR POSITION ~


https://github.com/user-attachments/assets/7fce8ab8-4ba4-4869-8ab8-220f653541d8


SPLITTING INTO WINDOWS ~

As opposed to moving windows, which will squeeze a window in between other
windows, splitting into a window will move it next to a target window.


https://github.com/user-attachments/assets/4bf49e27-d08b-4926-9f17-57bf2e702c64


MOVING AS FAR AS POSSIBLE IN A DIRECTION ~


https://github.com/user-attachments/assets/b3550d2d-287b-4b5d-9ea9-3466ac47c0d1


MOVE BETWEEN TABS ~


https://github.com/user-attachments/assets/6d5bf9ca-3b8b-4a72-978a-520eb2db779b


WORKS WITH ASYNCHRONOUS OUTPUT ~


https://github.com/user-attachments/assets/88abfe11-55bb-4096-979e-7a5754feaa6a


SIMILAR PROJECTS                                    *winmove-similar-projects*

- winshift.nvim <https://github.com/sindrets/winshift.nvim>
- vim-tradewinds <https://github.com/andymass/vim-tradewinds>

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
